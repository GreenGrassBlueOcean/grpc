#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

# Minimum Autoconf version required
AC_PREREQ([2.69])

# Initialize Autoconf: Package name, version, maintainer email
AC_INIT([grpc], [0.2.0], [nfultz@gmail.com])

# Set the source directory (relative to this file)
AC_CONFIG_SRCDIR([src/client.cpp])

# Define optional config header file (useful for defines like HAVE_GRPC)
AC_CONFIG_HEADERS([src/config.h])

# Specify directory for auxiliary build tools (like install-sh, missing)
AC_CONFIG_AUX_DIR([tools])

# Standard checks for essential programs
AC_PROG_CXX          # Find C++ compiler (sets CXX variable)
AC_PROG_CC           # Find C compiler (sets CC variable)
AC_PROG_CPP          # Find C preprocessor (sets CPP variable)
AC_PROG_LN_S         # Check for symbolic link command
AC_PROG_MAKE_SET     # Check for 'make' and ensure $(MAKE) is set

# Check for C++17 support (required by Abseil/modern gRPC)
# This macro requires the Autoconf Archive (autoconf-archive package)
AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])

# Check for pkg-config tool
PKG_PROG_PKG_CONFIG([0.28]) # Minimum version 0.28 recommended

# Check for the grpc++ library using pkg-config
# If found, sets shell variables: GRPCXX_CFLAGS, GRPCXX_LIBS
# If not found, run the action-if-failure (AC_MSG_FAILURE)
PKG_CHECK_MODULES([GRPCXX], [grpc++], [], [
  AC_MSG_FAILURE([
--------------------------------------------------------------------
grpc++ library (libgrpc++-dev or equivalent) not found.
'pkg-config --cflags --libs grpc++' failed.

Please install the gRPC C++ development package for your system. Examples:
  Debian/Ubuntu: sudo apt-get install libgrpc++-dev libprotobuf-dev protobuf-compiler
  Fedora:        sudo dnf install grpc-devel protobuf-devel
  macOS (brew):  brew install grpc protobuf

See README for more details.
--------------------------------------------------------------------])
])

# Make the detected flags available for substitution in Makevars.in
# Using different names (GRPC_PKG_...) avoids clashes with potential env vars
AC_SUBST([GRPC_PKG_CXXFLAGS], ["${GRPCXX_CFLAGS}"])
AC_SUBST([GRPC_PKG_LIBS], ["${GRPCXX_LIBS}"])

# Define the output files to be generated by configure from .in templates
AC_CONFIG_FILES([src/Makevars:src/Makevars.in]) # Create src/Makevars from src/Makevars.in

# Finalize the configuration process and generate output files
AC_OUTPUT
