% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GrpcClient.R
\name{GrpcClient}
\alias{GrpcClient}
\title{gRPC Client R6 Class}
\description{
An R6 class to create and manage a gRPC client. It parses a `.proto` file
to generate callable stubs for all RPC methods defined in the service.
}
\details{
The client is configured upon initialization with the path to a `.proto` file
and the server's channel string (address and port). It internally uses a
`ProtoParser` to compile the proto and discover service methods.

Once created, the client's stubs are immediately available in the public
`$stubs` field. Each stub provides a `$build()` method to construct a valid
request message and a `$call()` method to execute the RPC.
}
\examples{
\dontrun{
# Helper function to create a temporary .proto file for the example
create_temp_proto <- function(content) {
  proto_file <- tempfile(fileext = ".proto")
  writeLines(text = content, con = proto_file)
  return(proto_file)
}

# 1. Define proto content
proto_content <- '
syntax = "proto3";
package helloworld;
message HelloRequest { string name = 1; }
message HelloReply { string message = 1; }
service Greeter { rpc SayHello (HelloRequest) returns (HelloReply); }
'
proto_file <- create_temp_proto(proto_content)

# 2. Create a gRPC client instance
# This automatically parses the file and prepares the stubs.
# NOTE: This example assumes a gRPC server is running on localhost:50051
client <- GrpcClient$new(proto_file, "localhost:50051")

# 3. Access the stubs and build a request message
request <- client$stubs$SayHello$build(name = "R6")
print(request)

# 4. Call the remote method with the request message
# The C++ backend function `robust_grpc_client_call` needs to be available
# For this example to run, we would mock it.
# response <- client$stubs$SayHello$call(request)
# print(response$message)

# Clean up the temporary file
unlink(proto_file)
}
}
\seealso{
\code{\link{ProtoParser}}, \code{\link{GrpcLogger}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GrpcClient-new}{\code{GrpcClient$new()}}
\item \href{#method-GrpcClient-lock}{\code{GrpcClient$lock()}}
\item \href{#method-GrpcClient-clone}{\code{GrpcClient$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcClient-new}{}}}
\subsection{Method \code{new()}}{
Create a new `GrpcClient` instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcClient$new(parser, channel, logger = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parser}}{A fully instantiated `ProtoParser` object.}

\item{\code{channel}}{A string specifying the server address and port (e.g., "localhost:50051").}

\item{\code{logger}}{An optional logger object. If `NULL`, a default `GrpcLogger` is used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcClient-lock"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcClient-lock}{}}}
\subsection{Method \code{lock()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcClient$lock()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
