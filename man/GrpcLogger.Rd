% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GrpcLogger.R
\name{GrpcLogger}
\alias{GrpcLogger}
\title{gRPC Logger}
\description{
An R6 class for handling logging within the gRPC package.
It attempts to use 'futile.logger' if available, otherwise falls back
to base R messaging/warning/stopping functions.
}
\details{
This logger provides a consistent interface for logging messages at different
severity levels. Log messages are constructed using `sprintf`-like behavior:
if multiple arguments are passed to a logging method (e.g., `logger$info(fmt, val1, val2)`),
the first argument is treated as an `sprintf` format string, and subsequent arguments
are values to be formatted into it. If a single argument is passed, it is treated
as a literal message.

Example:
```
logger <- GrpcLogger$new()
logger$info("Request for ID %s processed in %.2f seconds.", request_id, duration)
logger$warn("A literal warning message with a % sign.")
```

When `futile.logger` is used, any literal percent signs (`%`) in the final
formatted message are automatically escaped to `%%` before being passed to
`futile.logger` functions. This is to prevent conflicts with `futile.logger`'s
internal use of `sprintf` for its own layout formatting.

The internal mechanism for checking `futile.logger` availability can be
overridden during initialization for testing purposes by providing a
custom `can_flog_fun`. The underlying implementation (`..can_flog_impl`)
can also have its `requireNamespace` dependency injected for fine-grained testing.
}
\section{Private Members}{

Internal implementation details:
\itemize{
  \item `..can_flog_impl(level_func_name, .req_ns_fun)`: The default function for
    checking `futile.logger` function availability.
  \item `.can_flog`: The function (either default or injected) that will actually
    be called by public methods to determine if `futile.logger` should be used.
  \item `.sprintf_message(...)`: A helper to format `...` arguments into a single
    string, using `sprintf` if multiple arguments are provided.
}
}

\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GrpcLogger-new}{\code{GrpcLogger$new()}}
\item \href{#method-GrpcLogger-info}{\code{GrpcLogger$info()}}
\item \href{#method-GrpcLogger-warn}{\code{GrpcLogger$warn()}}
\item \href{#method-GrpcLogger-error}{\code{GrpcLogger$error()}}
\item \href{#method-GrpcLogger-fatal}{\code{GrpcLogger$fatal()}}
\item \href{#method-GrpcLogger-debug}{\code{GrpcLogger$debug()}}
\item \href{#method-GrpcLogger-trace}{\code{GrpcLogger$trace()}}
\item \href{#method-GrpcLogger-clone}{\code{GrpcLogger$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-new"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new GrpcLogger object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$new(can_flog_fun = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{can_flog_fun}}{(optional) A function to override the internal
`.can_flog` mechanism for checking `futile.logger` availability.
Primarily for testing. The function should take one argument (the
`futile.logger` function name string, e.g., "flog.info") and return
`TRUE` if `futile.logger` should be used, `FALSE` otherwise.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-info"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-info}{}}}
\subsection{Method \code{info()}}{
Log an informational message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$info(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted into a log message. If multiple
arguments are provided, the first is treated as an `sprintf` format
string and the rest as values. If a single argument is provided, it is
treated as a literal message.}

\item{\code{.envir}}{The environment in which to evaluate expressions for
`futile.logger`. Defaults to the calling environment of this method.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-warn"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-warn}{}}}
\subsection{Method \code{warn()}}{
Log a warning message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$warn(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted (see `info` method description).}

\item{\code{.envir}}{The environment for `futile.logger` evaluation.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-error"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-error}{}}}
\subsection{Method \code{error()}}{
Log an error message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$error(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted (see `info` method description).}

\item{\code{.envir}}{The environment for `futile.logger` evaluation.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-fatal"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-fatal}{}}}
\subsection{Method \code{fatal()}}{
Log a fatal error message and stop execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$fatal(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted (see `info` method description).}

\item{\code{.envir}}{The environment for `futile.logger` evaluation.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-debug"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-debug}{}}}
\subsection{Method \code{debug()}}{
Log a debug message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$debug(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted (see `info` method description).}

\item{\code{.envir}}{The environment for `futile.logger` evaluation.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-trace"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-trace}{}}}
\subsection{Method \code{trace()}}{
Log a trace message.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$trace(..., .envir = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to be formatted (see `info` method description).}

\item{\code{.envir}}{The environment for `futile.logger` evaluation.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GrpcLogger-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GrpcLogger-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GrpcLogger$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
