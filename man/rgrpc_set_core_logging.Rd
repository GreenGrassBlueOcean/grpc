% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logging.R
\name{rgrpc_set_core_logging}
\alias{rgrpc_set_core_logging}
\title{Configure gRPC C-core Logging Environment Variables}
\usage{
rgrpc_set_core_logging(trace_options = NULL, verbosity = NULL, quiet = FALSE)
}
\arguments{
\item{trace_options}{A character string or vector specifying the gRPC tracers
to enable.
\itemize{
  \item A single string with comma-separated tracer names (e.g., `"api,channel,http"`).
  \item A character vector of tracer names (e.g., `c("api", "channel", "http")`),
        which will be combined with commas.
  \item `"all"` to enable all available tracers.
  \item `NULL` or `character(0)` to unset (disable) `GRPC_TRACE`.
}
Defaults to `NULL` (GRPC_TRACE is unset).}

\item{verbosity}{A single character string for the gRPC C-core log verbosity.
Allowed values are `"DEBUG"`, `"INFO"`, `"ERROR"`.
`NULL` will unset (disable) `GRPC_VERBOSITY`.
Defaults to `NULL` (GRPC_VERBOSITY is unset).}

\item{quiet}{Logical. If `TRUE`, suppresses messages from this function
indicating which environment variables were set/unset. Defaults to `FALSE`.}
}
\value{
Invisibly returns a list containing the *previous* values of
  `GRPC_TRACE` and `GRPC_VERBOSITY`. This allows for restoring prior settings.
  If an environment variable was not previously set, its corresponding value
  in the returned list will be `NULL`.
}
\description{
Sets or unsets the `GRPC_TRACE` and `GRPC_VERBOSITY` environment variables,
which control the built-in logging and tracing detail of the underlying
gRPC C-core library. These settings are primarily for deep debugging of
gRPC's internal operations and can be very verbose.
}
\details{
**Important Timing:** For these settings to reliably take effect, this
function should typically be called *before* the gRPC C-core is initialized.
In most R packages using gRPC, this means calling it:
\itemize{
  \item Before `library(grpc)` if the package initializes gRPC on load.
  \item Or, at least before the first call to gRPC operations like
        `grpc_client()` or `start_server()` if initialization is deferred.
}
If called after gRPC has initialized, changes might not apply or might only
affect new gRPC objects (like channels or servers) created subsequently.

**Available Tracers (`trace_options`):**
The gRPC C-core offers various tracers. For an up-to-date list, refer to the
official gRPC documentation (e.g., search for "gRPC Tracing" or check
`grpc/src/core/lib/debug/trace.cc` in the gRPC source).
Common tracers include:
`api`, `call_error`, `channel`, `client_channel`, `connectivity_state`,
`cq_poller` (or `polling` for older versions), `http`, `http1`, `http2`,
`initialization`, `metadata`, `op_failure`, `pick_first`, `round_robin`,
`server_channel`, `subchannel`, `tcp`, `timer`, `timer_check`.
Using `"all"` enables all tracers and is extremely verbose.

**Verbosity Levels (`verbosity`):**
\itemize{
  \item `"DEBUG"`: Enables debug logging, very verbose.
  \item `"INFO"`: Enables informational logs.
  \item `"ERROR"`: Enables only error logs (least verbose).
}
}
\examples{
\dontrun{
# It's best to call this early, e.g., before library(grpc) or gRPC operations.

# Example: Enable API and channel tracing with DEBUG verbosity
old_settings <- rgrpc_set_core_logging(
  trace_options = c("api", "channel"),
  verbosity = "DEBUG"
)
print("gRPC C-core logging configured. Proceed with gRPC operations.")
# library(grpc)
# ... your gRPC code ...

# Example: Turn off all gRPC C-core tracing and verbosity
rgrpc_set_core_logging(trace_options = NULL, verbosity = NULL)
print("gRPC C-core logging disabled.")

# Example: Enable all tracers with INFO verbosity
# rgrpc_set_core_logging(trace_options = "all", verbosity = "INFO")

# To restore previous settings (if you saved them):
# if (exists("old_settings")) {
#   rgrpc_set_core_logging(
#     trace_options = old_settings$GRPC_TRACE,
#     verbosity = old_settings$GRPC_VERBOSITY
#   )
#   print("Restored previous gRPC C-core logging settings.")
# }
}
}
