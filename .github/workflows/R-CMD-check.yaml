# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-24.04,   r: 'release'}
          - {os: ubuntu-24.04,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-24.04,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Non-Windows
      - name: Install system dependencies (Linux - Ubuntu 24.04)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf autoconf-archive pkg-config \
            libgrpc-dev libgrpc++-dev protobuf-compiler libprotobuf-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool


      - name: Find gRPC C-core headers and verify pkg-config (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "--- Locating 'grpc/grpc.h' (a key C-core header) ---"
          # This find command looks for the file 'grpc.h' inside any directory named 'grpc' under /usr
          GRPC_CORE_HEADER_PATH=$(sudo find /usr -type f -path '*/grpc/grpc.h' -print -quit)
          if [ -n "$GRPC_CORE_HEADER_PATH" ]; then
            echo "Found grpc.h at: $GRPC_CORE_HEADER_PATH"
            # Extract the directory that should be added to -I
            # e.g., if found at /usr/include/some-grpc-subdir/grpc/grpc.h, we want -I/usr/include/some-grpc-subdir
            GRPC_C_INCLUDE_DIR=$(dirname "$GRPC_CORE_HEADER_PATH" | sed 's|/grpc$||')
            echo "Deduced C-core include directory for -I: $GRPC_C_INCLUDE_DIR"
            echo "VERIFIED_GRPC_C_INCLUDE_DIR=${GRPC_C_INCLUDE_DIR}" >> $GITHUB_ENV
          else
            echo "ERROR: grpc/grpc.h (C-core header) not found under /usr. Installation might be incomplete or in an unexpected location."
            # List contents of likely include directories for further manual inspection
            echo "Listing /usr/include/ ..."
            ls -A /usr/include || true
            echo "Listing /usr/local/include/ ..."
            ls -A /usr/local/include || true
            exit 1 # Fail the job if we can't find the core header
          fi

          echo "--- Verifying pkg-config for grpc++ ---"
          pkg-config --modversion grpc++ || echo "WARNING: pkg-config cannot find grpc++"
          echo "grpc++ CFLAGS: $(pkg-config --cflags grpc++)"
          echo "grpc++ LIBS: $(pkg-config --libs grpc++)"

          echo "--- Verifying pkg-config for grpc (C-core, if .pc file exists) ---"
          pkg-config --modversion grpc || echo "WARNING: pkg-config cannot find grpc (C-core)"
          echo "grpc CFLAGS: $(pkg-config --cflags grpc)"
          echo "grpc LIBS: $(pkg-config --libs grpc)"

          echo "--- Verifying pkg-config for protobuf ---"
          pkg-config --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }
          echo "protobuf CFLAGS: $(pkg-config --cflags protobuf)"
          echo "protobuf LIBS: $(pkg-config --libs protobuf)"

      # System Dependencies - Windows
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      # Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # Verification step for Windows tools
      - name: Verification of tools in PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      - name: Verify pkg-config setup (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          echo "Verifying pkg-config for grpc++..."
          pkg-config --modversion grpc++ || echo "WARNING: pkg-config cannot find grpc++"
          echo "grpc++ CFLAGS: $(pkg-config --cflags grpc++)"
          echo "grpc++ LIBS: $(pkg-config --libs grpc++)"
          echo "Verifying pkg-config for grpc (C-core)..." # ADD THIS BLOCK
          pkg-config --modversion grpc || echo "WARNING: pkg-config cannot find grpc (C-core)"
          echo "grpc CFLAGS: $(pkg-config --cflags grpc)"   # ADD THIS BLOCK
          echo "grpc LIBS: $(pkg-config --libs grpc)"     # ADD THIS BLOCK
          echo "Verifying pkg-config for protobuf..."
          pkg-config --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }
          echo "protobuf CFLAGS: $(pkg-config --cflags protobuf)"
          echo "protobuf LIBS: $(pkg-config --libs protobuf)"


      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          # Use 'cache: false' to disable caching, not 'cache-enabled: false'
          cache: false # For debugging pak error, re-enable later by removing or setting to true

      # Show Session Info
      - name: Show R Session Info
        shell: Rscript {0}
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Version"]
          sessioninfo::session_info(pkgs, include_base = TRUE)

      # Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'

          #error-on: 'warning' # This is a valid input
          #check-dir: 'check'   # This is a valid input

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

      # Display Check Logs on Failure
      # ... (this step can remain as is) ...
      - name: Show check logs on failure
        if: failure()
        shell: Rscript {0}
        run: |
          pkg_name_desc <- read.dcf("DESCRIPTION", fields = "Package")[1,1]
          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))

          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )

          for (log_file_path in log_files_to_show) {
            if (file.exists(log_file_path)) {
              cat(sprintf("\n--- Start of %s ---\n", basename(log_file_path)))
              try(writeLines(readLines(log_file_path)), silent = TRUE)
              cat(sprintf("\n--- End of %s ---\n", basename(log_file_path)))
            } else {
              message(sprintf("Log file not found: %s", log_file_path))
            }
          }

          if (!any(sapply(log_files_to_show, file.exists))) {
            cat("\n--- Files in 'check' directory structure (base R list.files): ---\n")
            print(list.files("check", recursive = TRUE, all.files = TRUE, full.names = TRUE))
          }

      # Upload Full Check Results Directory on Failure
      # ... (this step can remain as is) ...
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
