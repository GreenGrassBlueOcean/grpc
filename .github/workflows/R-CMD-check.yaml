# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master] # Adjust to your primary branch name(s)
  pull_request:
    branches: [main, master] # Adjust to your primary branch name(s)

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-24.04,   r: 'release'}
          - {os: ubuntu-24.04,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-24.04,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc # Optional, if vignettes need it
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # STEP 1: Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # STEP 2: Install System Dependencies
      - name: Install system dependencies (Linux - Ubuntu 24.04)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf autoconf-archive pkg-config \
            libgrpc-dev libgrpc++-dev protobuf-compiler libprotobuf-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        # Use the RTOOLS_SHELL environment variable set by the setup-r action for robust MSYS2 execution
        shell: ${{ env.RTOOLS_SHELL }} /usr/bin/bash -eo pipefail {0}
        env:
          CHERE_INVOKING: "true" # Often needed for correct path handling with this shell invocation
        run: |
          echo "Current MSYS2 PATH: $PATH"

          echo "Step 1: Updating MSYS2 package databases..."
          pacman -Sy --noconfirm || echo "pacman -Sy reported non-zero exit, but continuing..."

          echo "Step 2: Updating core MSYS2 packages (pacman, msys2-runtime). This may cause shell to exit."
          # If pacman or msys2-runtime are updated, pacman might try to exit the shell.
          # '|| true' ensures this specific command doesn't fail the whole step if that happens.
          pacman -S --needed --noconfirm pacman msys2-runtime || true

          echo "Step 3: Running full system update (pacman -Syu)..."
          # These might run in a "new" shell if the previous command forced an exit.
          pacman -Syu --noconfirm || echo "First -Syu attempt done or failed."
          pacman -Syu --noconfirm # Run again to catch any remaining updates

          echo "Step 4: Updating all other installed packages (pacman -Su)..."
          pacman -Su --noconfirm

          echo "Step 5: Installing build tools (pkg-config, make) for UCRT64..."
          pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-pkg-config \
                                      mingw-w64-ucrt-x86_64-make

          echo "Step 6: Installing gRPC and Protobuf for UCRT64 via pacman..."
          pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-grpc mingw-w64-ucrt-x86_64-protobuf

          echo "--- Verification: Tools in MSYS2 PATH ---"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND after install"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND after install"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      # STEP 3: Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          needs: check
          # For debugging the 'pak' error "Cannot parse package: #.", cache is disabled.
          # Re-enable caching (remove line below or set to true) once pak issue is resolved.
          cache-enabled: false

      # STEP 4: Show Session Info (Optional, useful for debugging CI environment)
      - name: Show R Session Info
        shell: Rscript {0}
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Version"]
          sessioninfo::session_info(pkgs, include_base = TRUE)

      # STEP 5: Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          error-on: 'warning'  # Corrected from error_on
          check-dir: 'check'   # Corrected from check_dir

      # STEP 6: Display Check Logs on Failure
      - name: Show check logs on failure
        if: failure()
        shell: Rscript {0}
        run: |
          pkg_name_desc <- read.dcf("DESCRIPTION", fields = "Package")[1,1]
          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))

          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )

          for (log_file_path in log_files_to_show) {
            if (file.exists(log_file_path)) {
              cat(sprintf("\n--- Start of %s ---\n", basename(log_file_path)))
              # Use try() to prevent error if readLines fails (e.g., permission issues, though unlikely)
              try(writeLines(readLines(log_file_path)), silent = TRUE)
              cat(sprintf("\n--- End of %s ---\n", basename(log_file_path)))
            } else {
              message(sprintf("Log file not found: %s", log_file_path))
            }
          }

          # Fallback for listing files if primary logs are missing
          if (!any(sapply(log_files_to_show, file.exists))) {
            cat("\n--- Files in 'check' directory structure (using base R list.files): ---\n")
            print(list.files("check", recursive = TRUE, all.files = TRUE, full.names = TRUE))
          }

      # STEP 7: Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
