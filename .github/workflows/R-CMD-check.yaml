# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Linux (for source build of gRPC)
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev # Added libre2-dev, but we will build gRPC's re2 from submodule

      - name: Build and Install gRPC from Source (Linux)
        if: runner.os == 'Linux'
        run: |
          GRPC_VERSION="v1.72.0"
          echo "Building gRPC version: ${GRPC_VERSION}"

          sudo apt-get update # Ensure lists are fresh
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf libtool pkg-config cmake clang git

          git clone --depth 1 --branch ${GRPC_VERSION} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init

          mkdir -p cmake/build
          cd cmake/build

          echo "Configuring gRPC with CMake..."
          # Note: -DgRPC_RE2_PROVIDER=module is intentionally omitted below
          # to let gRPC build re2 from its bundled submodule for better compatibility.
          cmake ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_ABSL_PROVIDER=module \
            -DgRPC_CARES_PROVIDER=module \
            -DgRPC_PROTOBUF_PROVIDER=module \
            -DgRPC_SSL_PROVIDER=module \
            -DgRPC_ZLIB_PROVIDER=module
            # No backslash on the last argument line for cmake

          echo "Building gRPC..."
          make -j$(nproc)

          echo "Installing gRPC to /usr/local..."
          sudo make install

          echo "Updating linker cache..."
          sudo ldconfig

          echo "Setting GITHUB_ENV variables for subsequent steps..."
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "gRPC build and install complete."

      - name: Verify gRPC C-core headers from Source Build (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "--- Verifying gRPC headers in /usr/local/include (expected from source build) ---"
          BASE_INSTALL_DIR="/usr/local"
          GRPC_C_CORE_BASE_INCLUDE_DIR="${BASE_INSTALL_DIR}/include"
          GRPC_HEADERS_SUBDIR="${GRPC_C_CORE_BASE_INCLUDE_DIR}/grpc"

          if [ -f "${GRPC_HEADERS_SUBDIR}/grpc.h" ]; then
            echo "Found grpc.h at ${GRPC_HEADERS_SUBDIR}/grpc.h"
          else
            echo "ERROR: grpc.h NOT FOUND at ${GRPC_HEADERS_SUBDIR}/grpc.h"
            echo "Listing contents of ${GRPC_C_CORE_BASE_INCLUDE_DIR}/ :"
            ls -A "${GRPC_C_CORE_BASE_INCLUDE_DIR}/" || echo "Could not list ${GRPC_C_CORE_BASE_INCLUDE_DIR}"
            exit 1
          fi

          if [ -f "${GRPC_HEADERS_SUBDIR}/credentials.h" ]; then
            echo "SUCCESS: Found credentials.h at ${GRPC_HEADERS_SUBDIR}/credentials.h"
          else
            echo "ERROR: credentials.h NOT FOUND at ${GRPC_HEADERS_SUBDIR}/credentials.h"
            echo "Listing contents of ${GRPC_HEADERS_SUBDIR}/ :"
            ls -A "${GRPC_HEADERS_SUBDIR}/" || echo "Could not list ${GRPC_HEADERS_SUBDIR}"
            # ... (rest of error handling) ...
            exit 1
          fi

          echo "--- Verifying pkg-config can find source-built gRPC ---"
          export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH"
          echo "Testing with PKG_CONFIG_PATH = $PKG_CONFIG_PATH"

          time pkg-config --modversion grpc || { echo "ERROR: pkg-config cannot find grpc (C-core) after source build"; exit 1; }
          echo "C-core grpc CFLAGS from pkg-config:"
          time pkg-config --cflags grpc
          time pkg-config --modversion grpc++ || { echo "ERROR: pkg-config cannot find grpc++ after source build"; exit 1; }
          echo "grpc++ CFLAGS from pkg-config:"
          time pkg-config --cflags grpc++

      # System Dependencies - macOS
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool

      # System Dependencies - Windows
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      # Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        id: setup-r-env
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # Verification step for Windows tools
      - name: Verification of tools in PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      - name: Verify pkg-config setup (Linux/macOS)
        # Renamed for clarity from the log output, was effectively:
        # Run echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
        if: runner.os == 'Linux' || runner.os == 'macOS'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          set -x # Echo all commands for detailed debugging
          echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
          echo "Location of pkg-config: $(which pkg-config)"
          echo "Version of pkg-config: $(pkg-config --version)"

          echo "Verifying pkg-config for grpc++..."
          time pkg-config --debug --modversion grpc++ || echo "WARNING: pkg-config cannot find grpc++"
          echo "grpc++ CFLAGS:"
          time pkg-config --debug --cflags grpc++
          echo "grpc++ LIBS:"
          time pkg-config --debug --libs grpc++

          echo "Verifying pkg-config for grpc (C-core)..."
          time pkg-config --debug --modversion grpc || echo "WARNING: pkg-config cannot find grpc (C-core)"
          echo "grpc CFLAGS:"
          time pkg-config --debug --cflags grpc
          echo "grpc LIBS:"
          time pkg-config --debug --libs grpc

          echo "Verifying pkg-config for protobuf..."
          time pkg-config --debug --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }
          echo "protobuf CFLAGS:"
          time pkg-config --debug --cflags protobuf
          echo "protobuf LIBS:"
          time pkg-config --debug --libs protobuf
          set +x

      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false # Explicitly false as per original, consider if true is desired for speed

      # Show Session Info
      - name: Show R Session Info
        shell: bash
        run: |
          if [ -n "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            RSCRIPT_EXEC="${{ steps.setup-r-env.outputs.rscript-path }}"
          else
            RSCRIPT_EXEC="Rscript"
          fi
          "$RSCRIPT_EXEC" -e 'options(width = 100); pkgs <- installed.packages()[, "Version"]; sessioninfo::session_info(pkgs, include_base = TRUE)'

      # Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          # Consider adding a timeout-minutes for this specific action if you want it to fail faster than 6h
          # timeout-minutes: 240 # e.g., 4 hours for R CMD check step itself

      # ... (rest of your YAML: Cleanup, Show check logs on failure, Upload artifact) ...
      # The "Show check logs on failure" R script is a good debugging tool.
      # No changes needed to those parts based on the current primary issue.

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

      # Display Check Logs on Failure
      - name: Show check logs on failure
        if: failure()
        shell: bash
        run: |
          echo "Attempting to display R CMD check logs..."
          # ... (rest of your existing R script for showing logs) ...
          # Ensure this R script block is correctly indented under the run: |
          if [ -z "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            echo "WARNING: Rscript path from setup-r step is empty. This is expected if failure occurred before R setup."
            # ... (rest of your existing R script for showing logs) ...
            exit 0
          fi

          ${{ steps.setup-r-env.outputs.rscript-path }} - <<EOF
          # --- Start of R script ---
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            # ... (your existing R script content) ...
          }
          # ... (rest of your existing R script content) ...
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
