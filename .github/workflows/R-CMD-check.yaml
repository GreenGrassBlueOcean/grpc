# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64
      GRPC_VERSION: "v1.72.0" # Define gRPC version for cache key and build script

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Linux (common)
      - name: Install common system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev \
            build-essential autoconf libtool pkg-config cmake clang git # For gRPC build if needed

      # Cache and Restore gRPC build for Linux
      - name: Cache locally built gRPC (Linux)
        if: runner.os == 'Linux'
        id: cache-grpc-build
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libgrpc.so*
            /usr/local/lib/libgrpc_unsecure.so*
            /usr/local/lib/libgrpc++.so*
            /usr/local/lib/libgrpc++_unsecure.so*
            /usr/local/lib/libgpr.so*
            /usr/local/lib/libaddress_sorting.so*
            /usr/local/lib/pkgconfig/grpc.pc
            /usr/local/lib/pkgconfig/grpc_unsecure.pc
            /usr/local/lib/pkgconfig/grpc++.pc
            /usr/local/lib/pkgconfig/grpc++_unsecure.pc
            /usr/local/include/grpc
            /usr/local/include/grpc++
            /usr/local/bin/grpc_cpp_plugin
            # Add other specific gRPC related files/small directories if necessary
            # For Abseil libraries if they are also placed in /usr/local/lib and are large
            /usr/local/lib/libabsl_*
            /usr/local/lib/pkgconfig/protobuf.pc # Explicitly cache protobuf.pc if it's in /usr/local
            /usr/local/lib64/pkgconfig/protobuf.pc # And if it's in /usr/local/lib64
          key: ${{ runner.os }}-grpc-${{ env.GRPC_VERSION }}-r${{ matrix.config.r }}

      - name: Set PKG_CONFIG_PATH and other ENV VARS from potential cache (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Setting GITHUB_ENV variables for subsequent steps (pre-gRPC build/restore)..."
          # This ensures PKG_CONFIG_PATH is set even if gRPC is restored from cache
          CACHED_PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig"

          # Correctly append to existing PKG_CONFIG_PATH if it's already set by a previous step
          # (though in this workflow, this is likely the first place it's substantially defined for gRPC)
          if [ -n "$PKG_CONFIG_PATH_EXISTING" ]; then # Use a different temp var to avoid self-reference issues
            echo "PKG_CONFIG_PATH=${CACHED_PKG_CONFIG_PATH}:${PKG_CONFIG_PATH_EXISTING}" >> $GITHUB_ENV
          else
            echo "PKG_CONFIG_PATH=${CACHED_PKG_CONFIG_PATH}" >> $GITHUB_ENV
          fi
          # VERIFIED_GRPC_C_INCLUDE_DIR is primarily for your R package build if it needs it
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV

      - name: Build and Install gRPC from Source if not cached (Linux)
        if: steps.cache-grpc-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          echo "Cache not found or miss for gRPC. Building gRPC version: ${{ env.GRPC_VERSION }}"

          git clone --depth 1 --branch ${{ env.GRPC_VERSION }} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init

          mkdir -p cmake/build
          cd cmake/build

          echo "Configuring gRPC with CMake..."
          cmake ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_ABSL_PROVIDER=module \
            -DgRPC_CARES_PROVIDER=module \
            -DgRPC_PROTOBUF_PROVIDER=module \
            -DgRPC_SSL_PROVIDER=module \
            -DgRPC_ZLIB_PROVIDER=module

          echo "Building gRPC..."
          make -j$(nproc)

          echo "Installing gRPC to /usr/local..."
          sudo make install
          echo "gRPC build and install complete."
          # PKG_CONFIG_PATH and VERIFIED_GRPC_C_INCLUDE_DIR should be picked up from the GITHUB_ENV
          # set in the "Set PKG_CONFIG_PATH..." step.

      - name: Update linker cache after gRPC install/restore (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Updating linker cache..."
          sudo ldconfig

      - name: Verify gRPC C-core headers (Linux)
        if: runner.os == 'Linux'
        env: # Make sure PKG_CONFIG_PATH set in GITHUB_ENV is available here
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          VERIFIED_GRPC_C_INCLUDE_DIR: ${{ env.VERIFIED_GRPC_C_INCLUDE_DIR }}
        run: |
          echo "--- Verifying gRPC headers in $VERIFIED_GRPC_C_INCLUDE_DIR ---"
          BASE_INSTALL_DIR="/usr/local" # Redundant if VERIFIED_GRPC_C_INCLUDE_DIR is used consistently
          GRPC_C_CORE_BASE_INCLUDE_DIR="${VERIFIED_GRPC_C_INCLUDE_DIR}" # Use env var
          GRPC_HEADERS_SUBDIR="${GRPC_C_CORE_BASE_INCLUDE_DIR}/grpc"

          if [ -f "${GRPC_HEADERS_SUBDIR}/grpc.h" ]; then
            echo "Found grpc.h at ${GRPC_HEADERS_SUBDIR}/grpc.h"
          else
            echo "ERROR: grpc.h NOT FOUND at ${GRPC_HEADERS_SUBDIR}/grpc.h"
            ls -A "${GRPC_C_CORE_BASE_INCLUDE_DIR}/" || echo "Could not list ${GRPC_C_CORE_BASE_INCLUDE_DIR}"
            exit 1
          fi
          if [ -f "${GRPC_HEADERS_SUBDIR}/credentials.h" ]; then
            echo "SUCCESS: Found credentials.h at ${GRPC_HEADERS_SUBDIR}/credentials.h"
          else
            echo "ERROR: credentials.h NOT FOUND at ${GRPC_HEADERS_SUBDIR}/credentials.h"
            ls -A "${GRPC_HEADERS_SUBDIR}/" || echo "Could not list ${GRPC_HEADERS_SUBDIR}"
            exit 1
          fi

          echo "--- Verifying pkg-config can find gRPC (source build or cache) ---"
          echo "Current PKG_CONFIG_PATH for this verification: $PKG_CONFIG_PATH"

          time pkg-config --modversion grpc || { echo "ERROR: pkg-config cannot find grpc (C-core)"; exit 1; }
          echo "C-core grpc CFLAGS from pkg-config:"
          time pkg-config --cflags grpc
          time pkg-config --modversion grpc++ || { echo "ERROR: pkg-config cannot find grpc++"; exit 1; }
          echo "grpc++ CFLAGS from pkg-config:"
          time pkg-config --cflags grpc++

      # System Dependencies - macOS
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool

      # System Dependencies - Windows
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      # Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        id: setup-r-env
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # Verification step for Windows tools
      - name: Verification of tools in PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"


      - name: Minimal pkg-config check for Protobuf (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
          echo "Verifying pkg-config for protobuf..."
          time pkg-config --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }

          echo "--- Contents of protobuf.pc ---"
          PROTOBUF_PC_FILE_PATH=$(pkg-config --variable=pcfiledir protobuf)/protobuf.pc
          if [ -f "$PROTOBUF_PC_FILE_PATH" ]; then
            echo "Found protobuf.pc at: $PROTOBUF_PC_FILE_PATH"
            cat "$PROTOBUF_PC_FILE_PATH"
          else
            echo "ERROR: protobuf.pc not found at expected location after pkg-config --variable call."
            echo "Attempting to find protobuf.pc in PKG_CONFIG_PATH:"
            IFS=:
            for path_component in $PKG_CONFIG_PATH; do
              if [ -f "$path_component/protobuf.pc" ]; then
                echo "Found in: $path_component/protobuf.pc"
                cat "$path_component/protobuf.pc"
                break
              fi
            done
            # List contents of pkgconfig directories for further debugging
            echo "Listing /usr/local/lib/pkgconfig:"
            ls -la /usr/local/lib/pkgconfig || echo "  (directory not found or empty)"
            echo "Listing /usr/local/lib64/pkgconfig:"
            ls -la /usr/local/lib64/pkgconfig || echo "  (directory not found or empty)"
            echo "Listing /usr/lib/x86_64-linux-gnu/pkgconfig (system default):" # Common on Ubuntu
            ls -la /usr/lib/x86_64-linux-gnu/pkgconfig || echo "  (directory not found or empty)"
          fi
          echo "--- End of protobuf.pc content ---"

          echo "Protobuf CFLAGS:"
          time pkg-config --cflags protobuf
          # echo "Protobuf LIBS:" # The --libs can be slow; consider if essential here
          # time pkg-config --libs protobuf

      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false # Keeping this as false from your original

      # Show Session Info
      - name: Show R Session Info
        shell: bash
        run: |
          if [ -n "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            RSCRIPT_EXEC="${{ steps.setup-r-env.outputs.rscript-path }}"
          else
            RSCRIPT_EXEC="Rscript"
          fi
          "$RSCRIPT_EXEC" -e 'options(width = 100); pkgs <- installed.packages()[, "Version"]; sessioninfo::session_info(pkgs, include_base = TRUE)'

      # Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        env: # PKG_CONFIG_PATH should be available from GITHUB_ENV
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          timeout-minutes: 350 # Approx 5h 50m, to ensure it completes or fails cleanly before overall job timeout

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

      # Display Check Logs on Failure
      - name: Show check logs on failure
        if: failure()
        shell: bash
        run: |
          echo "Attempting to display R CMD check logs..."
          echo "DEBUG: Rscript path from setup-r step: ${{ steps.setup-r-env.outputs.rscript-path }}"
          echo "DEBUG: Current PATH: $PATH"
          echo "DEBUG: Which Rscript (direct call): $(which Rscript || echo 'Rscript not found in PATH by which command')"
          echo "DEBUG: Rscript version (direct call): $(Rscript --version || echo 'Rscript --version command failed')"
          echo "DEBUG: Rscript version (using setup-r path): $(${steps.setup-r-env.outputs.rscript-path} --version || echo 'Rscript --version with explicit path failed')"

          if [ -z "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            echo "WARNING: Rscript path from setup-r step is empty. This is expected if failure occurred before R setup."
            echo "Cannot run R script to display detailed R CMD check logs."
            echo "Check logs from the preceding failing step for the primary error."
            if [ -d "check" ]; then
                echo "--- Basic listing of 'check' directory (if it exists) ---"
                ls -R check
            fi
            exit 0
          fi

          ${{ steps.setup-r-env.outputs.rscript-path }} - <<EOF
          # --- Start of R script ---
          # (Your full R script for analyzing check logs from previous responses goes here)
          # For brevity, I'm not repeating the entire R script, but ensure you have it here.
          # Example start:
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            pkg_name <- default_name
            if (file.exists("DESCRIPTION")) {
              tryCatch({
                dcf_content <- read.dcf("DESCRIPTION", fields = "Package")
                if (nrow(dcf_content) >= 1 && "Package" %in% colnames(dcf_content) &&
                    !is.na(dcf_content[1,1]) && nzchar(dcf_content[1,1])) {
                  pkg_name <- dcf_content[1,1]
                } else {
                  cat("WARNING: DESCRIPTION file found but 'Package' field is missing, empty, or NA.\n")
                }
              }, error = function(e) {
                cat(sprintf("WARNING: Error reading DESCRIPTION file: %s\n", e$message))
              })
            } else {
              cat("WARNING: DESCRIPTION file not found in the current working directory.\n")
            }
            return(pkg_name)
          }
          pkg_name_desc <- get_pkg_name_safe()
          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))
          cat(sprintf("Attempting to find logs in expected .Rcheck directory: %s\n\n", rcheck_dir))
          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )
          # ... (ensure your full R log display script is here)
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
