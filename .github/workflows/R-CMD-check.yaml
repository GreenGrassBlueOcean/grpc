# .github/workflows/R-CMD-check.yaml
name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64
      GRPC_VERSION: "v1.72.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      - name: Install common system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev \
            build-essential autoconf libtool pkg-config cmake clang git

      - name: Cache locally built gRPC (Linux)
        if: runner.os == 'Linux'
        id: cache-grpc-build
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libgrpc.so*
            /usr/local/lib/libgrpc_unsecure.so*
            /usr/local/lib/libgrpc++.so*
            /usr/local/lib/libgrpc++_unsecure.so*
            /usr/local/lib/libgpr.so*
            /usr/local/lib/libaddress_sorting.so*
            /usr/local/lib/pkgconfig/grpc.pc
            /usr/local/lib/pkgconfig/grpc_unsecure.pc
            /usr/local/lib/pkgconfig/grpc++.pc
            /usr/local/lib/pkgconfig/grpc++_unsecure.pc
            /usr/local/include/grpc
            /usr/local/include/grpc++
            /usr/local/bin/grpc_cpp_plugin
            /usr/local/lib/libabsl_*
          key: ${{ runner.os }}-grpc-module-protobuf-v1-${{ env.GRPC_VERSION }}-r${{ matrix.config.r }}

      - name: Set PKG_CONFIG_PATH for Linux
        if: runner.os == 'Linux'
        run: |
          SYSTEM_PC_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          CUSTOM_PC_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig" # For gRPC itself
          FINAL_PKG_CONFIG_PATH="$SYSTEM_PC_PATH" # Prioritize system for RProtoBuf
          FIRST_CUSTOM_DIR=$(echo "$CUSTOM_PC_PATH" | cut -d: -f1)
          if [ -n "$FIRST_CUSTOM_DIR" ] && [ -d "$FIRST_CUSTOM_DIR" ]; then
            if [ -n "$FINAL_PKG_CONFIG_PATH" ]; then
              FINAL_PKG_CONFIG_PATH="${FINAL_PKG_CONFIG_PATH}:${CUSTOM_PC_PATH}"
            else
              FINAL_PKG_CONFIG_PATH="$CUSTOM_PC_PATH"
            fi
          fi
          FINAL_PKG_CONFIG_PATH=$(echo "$FINAL_PKG_CONFIG_PATH" | sed 's/^://g' | sed 's/:$//g' | sed 's/::\+/:/g')
          echo "PKG_CONFIG_PATH=${FINAL_PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV # For your R package's Makevars if needed
          echo "Final PKG_CONFIG_PATH for subsequent steps: $FINAL_PKG_CONFIG_PATH"

      - name: Build and Install gRPC from Source if not cached (Linux)
        if: steps.cache-grpc-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          echo "Cache not found or miss for gRPC. Building gRPC version: ${{ env.GRPC_VERSION }}"
          git clone --depth 1 --branch ${{ env.GRPC_VERSION }} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init --recursive
          mkdir -p cmake/build
          cd cmake/build
          echo "Configuring gRPC with CMake (using Protobuf from module)..."
          # Using -DgRPC_PROTOBUF_PROVIDER=module
          # AND -Dprotobuf_INSTALL=OFF to prevent its .pc file from being installed to /usr/local
          cmake ../.. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DgRPC_ABSL_PROVIDER=module -DgRPC_CARES_PROVIDER=module -DgRPC_PROTOBUF_PROVIDER=module -DgRPC_SSL_PROVIDER=module -DgRPC_ZLIB_PROVIDER=module -Dprotobuf_INSTALL=OFF

          echo "Building gRPC..."
          make -j$(nproc)
          echo "Installing gRPC to /usr/local..."
          sudo make install
          echo "gRPC build and install complete."

      - name: "Safeguard: Clean any protobuf.pc from /usr/local (Linux)" # Name quoted
        if: runner.os == 'Linux'
        run: |
          echo "Performing safeguard removal of any protobuf.pc from /usr/local..."
          # This ensures RProtoBuf uses the system protobuf.pc
          sudo rm -f /usr/local/lib/pkgconfig/protobuf.pc /usr/local/lib64/pkgconfig/protobuf.pc
          echo "Done with safeguard removal."

      - name: Update linker cache after gRPC install/restore (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Updating linker cache..."
          sudo ldconfig

      - name: Minimal pkg-config check for Protobuf (Linux)
        # This check should now find the SYSTEM protobuf and its (blank Cflags) .pc file
        if: runner.os == 'Linux'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          set -e
          echo "Minimal pkg-config check for SYSTEM Protobuf."
          echo "PKG_CONFIG_PATH is: $PKG_CONFIG_PATH"
          echo "Checking for protobuf version..."
          pkg-config --modversion protobuf
          echo "Checking for protobuf cflags (expected to be blank for system protobuf based on debug):"
          pkg-config --cflags protobuf
          echo "Protobuf check completed."

      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        id: setup-r-env
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false

      - name: Show R Session Info
        shell: bash
        run: |
          if [ -n "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            RSCRIPT_EXEC="${{ steps.setup-r-env.outputs.rscript-path }}"
          else
            RSCRIPT_EXEC="Rscript"
          fi
          "$RSCRIPT_EXEC" -e 'options(width = 100); pkgs <- installed.packages()[, "Version"]; sessioninfo::session_info(pkgs, include_base = TRUE)'

      - name: Check R package
        id: r_cmd_check_step
        uses: r-lib/actions/check-r-package@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          timeout: 350m

      - name: Show check logs on failure
        if: failure()
        shell: bash
        env:
           R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR: ${{ steps.r_cmd_check_step.outputs.check-dir }}
        run: |
          # (Your log display script - keeping it concise for this example)
          echo "R CMD Check logs would be displayed here if R setup completed."
          if [ -n "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR" ] && [ -d "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR" ]; then
            echo "--- Listing $R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR ---"
            ls -R "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR"
            echo "--- 00check.log ---"
            cat "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR/00check.log" || true
            echo "--- 00install.out ---"
            cat "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR/00install.out" || true
          fi

      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: ${{ steps.r_cmd_check_step.outputs.check-dir }}
