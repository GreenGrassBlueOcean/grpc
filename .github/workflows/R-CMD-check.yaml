# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}
          # Add back windows and macos once Linux is stable
          # - {os: windows-latest, r: 'release'}
          # - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64 # For Windows if re-enabled
      GRPC_VERSION: "v1.72.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Linux (common)
      - name: Install common system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev \
            build-essential autoconf libtool pkg-config cmake clang git

      # Cache and Restore gRPC build for Linux
      - name: Cache locally built gRPC (Linux)
        if: runner.os == 'Linux'
        id: cache-grpc-build
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libgrpc.so*
            /usr/local/lib/libgrpc_unsecure.so*
            /usr/local/lib/libgrpc++.so*
            /usr/local/lib/libgrpc++_unsecure.so*
            /usr/local/lib/libgpr.so*
            /usr/local/lib/libaddress_sorting.so*
            /usr/local/lib/pkgconfig/grpc.pc
            /usr/local/lib/pkgconfig/grpc_unsecure.pc
            /usr/local/lib/pkgconfig/grpc++.pc
            /usr/local/lib/pkgconfig/grpc++_unsecure.pc
            /usr/local/include/grpc
            /usr/local/include/grpc++
            /usr/local/bin/grpc_cpp_plugin
            /usr/local/lib/libabsl_*
            # We *want* to avoid caching a protobuf.pc from /usr/local if gRPC puts a bad one there.
            # So, do not include /usr/local/lib/pkgconfig/protobuf.pc in the cache path.
          key: ${{ runner.os }}-grpc-custombuild-v2-${{ env.GRPC_VERSION }}-r${{ matrix.config.r }} # Modified cache key

      - name: Set PKG_CONFIG_PATH for Linux
        if: runner.os == 'Linux'
        run: |
          # Prioritize system paths for dependencies like RProtoBuf,
          # then /usr/local for our custom gRPC build.
          SYSTEM_PC_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          CUSTOM_PC_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig"

          # Check if PKG_CONFIG_PATH is already set and append to it if necessary
          # However, for this specific use case, we want to ensure system paths are first.
          FINAL_PKG_CONFIG_PATH="$SYSTEM_PC_PATH"
          if [[ ":$FINAL_PKG_CONFIG_PATH:" != *":$CUSTOM_PC_PATH:"* ]]; then # Avoid duplicates
             FINAL_PKG_CONFIG_PATH="${FINAL_PKG_CONFIG_PATH}:${CUSTOM_PC_PATH}"
          fi

          echo "PKG_CONFIG_PATH=${FINAL_PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV # For your R package's Makevars
          echo "Final PKG_CONFIG_PATH for subsequent steps: $FINAL_PKG_CONFIG_PATH"

      - name: Build and Install gRPC from Source if not cached (Linux)
        if: steps.cache-grpc-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          echo "Cache not found or miss for gRPC. Building gRPC version: ${{ env.GRPC_VERSION }}"
          git clone --depth 1 --branch ${{ env.GRPC_VERSION }} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init --recursive # Ensure protobuf submodule is definitely there

          mkdir -p cmake/build
          cd cmake/build

          echo "Configuring gRPC with CMake..."
          cmake ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_ABSL_PROVIDER=module \
            -DgRPC_CARES_PROVIDER=module \
            -DgRPC_PROTOBUF_PROVIDER=module \
            -DgRPC_SSL_PROVIDER=module \
            -DgRPC_ZLIB_PROVIDER=module \
            # THIS IS THE KEY ATTEMPT for Strategy 1:
            # Tell the Protobuf sub-build (used when gRPC_PROTOBUF_PROVIDER=module)
            # NOT to install its targets (like .pc files, headers that might conflict).
            # This option comes from Protobuf's own CMakeLists.txt.
            -Dprotobuf_INSTALL=OFF

          echo "Building gRPC..."
          make -j$(nproc)

          echo "Installing gRPC to /usr/local..."
          sudo make install # This should now install gRPC and its direct .pc files,
                            # but hopefully not the conflicting protobuf.pc from the submodule.
          echo "gRPC build and install complete."

      # This step might be redundant if -Dprotobuf_INSTALL=OFF works as expected.
      # Kept as a strong safeguard for now. If -Dprotobuf_INSTALL=OFF is confirmed effective,
      # this explicit removal can be removed later.
      - name: Safeguard: Clean problematic protobuf.pc from /usr/local (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Performing safeguard removal of protobuf.pc from /usr/local..."
          if [ -f /usr/local/lib/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib/pkgconfig/protobuf.pc
          fi
          if [ -f /usr/local/lib64/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib64/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib64/pkgconfig/protobuf.pc
          fi

      - name: Update linker cache after gRPC install/restore (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Updating linker cache..."
          sudo ldconfig

      # Minimal pkg-config check should now use SYSTEM protobuf
      - name: Minimal pkg-config check for Protobuf (Linux)
        if: runner.os == 'Linux'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
          echo "Verifying pkg-config for SYSTEM protobuf..."
          FOUND_PROTOBUF_VERSION=$(pkg-config --modversion protobuf) || { echo "ERROR: pkg-config cannot find system protobuf after potential cleanup."; exit 1; }
          echo "System Protobuf version: $FOUND_PROTOBUF_VERSION"
          echo "System Protobuf CFLAGS:"
          time pkg-config --cflags protobuf # Should be short and simple
          echo "--- Contents of system protobuf.pc being used ---"
          PROTOBUF_PC_FILE_PATH=$(pkg-config --variable=pcfiledir protobuf)/protobuf.pc
          if [ -f "$PROTOBUF_PC_FILE_PATH" ]; then
            echo "Found protobuf.pc at: $PROTOBUF_PC_FILE_PATH"
            cat "$PROTOBUF_PC_FILE_PATH"
          fi
          echo "--- End of system protobuf.pc content ---"

      # Install R Package Dependencies
      # RProtoBuf should now find the system libprotobuf-dev via its .pc file.
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false

      # ... (Show R Session Info, Check R package, etc. as before) ...
      # Ensure 'Check R package' step also uses env: PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          timeout: 350m # Corrected
