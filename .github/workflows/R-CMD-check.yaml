# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}
          # Re-enable Windows/macOS once Linux is stable
          # - {os: windows-latest, r: 'release'}
          # - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64
      GRPC_VERSION: "v1.72.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      - name: Install common system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev \
            build-essential autoconf libtool pkg-config cmake clang git

      - name: Cache locally built gRPC (Linux)
        if: runner.os == 'Linux'
        id: cache-grpc-build
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libgrpc.so*
            /usr/local/lib/libgrpc_unsecure.so*
            /usr/local/lib/libgrpc++.so*
            /usr/local/lib/libgrpc++_unsecure.so*
            /usr/local/lib/libgpr.so*
            /usr/local/lib/libaddress_sorting.so*
            /usr/local/lib/pkgconfig/grpc.pc
            /usr/local/lib/pkgconfig/grpc_unsecure.pc
            /usr/local/lib/pkgconfig/grpc++.pc
            /usr/local/lib/pkgconfig/grpc++_unsecure.pc
            /usr/local/include/grpc
            /usr/local/include/grpc++
            /usr/local/bin/grpc_cpp_plugin
            /usr/local/lib/libabsl_*
          key: ${{ runner.os }}-grpc-custombuild-v4-${{ env.GRPC_VERSION }}-r${{ matrix.config.r }} # Incremented cache key

      - name: Set PKG_CONFIG_PATH for Linux
        if: runner.os == 'Linux'
        run: |
          SYSTEM_PC_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          CUSTOM_PC_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig"
          FINAL_PKG_CONFIG_PATH="$SYSTEM_PC_PATH"
          # Check if the first directory in CUSTOM_PC_PATH exists before appending
          # This avoids adding paths like "/usr/local/lib/pkgconfig" if it doesn't exist
          # and also handles if CUSTOM_PC_PATH is empty.
          FIRST_CUSTOM_DIR=$(echo "$CUSTOM_PC_PATH" | cut -d: -f1)
          if [ -n "$FIRST_CUSTOM_DIR" ] && [ -d "$FIRST_CUSTOM_DIR" ]; then
            if [ -n "$FINAL_PKG_CONFIG_PATH" ]; then
              FINAL_PKG_CONFIG_PATH="${FINAL_PKG_CONFIG_PATH}:${CUSTOM_PC_PATH}"
            else
              FINAL_PKG_CONFIG_PATH="$CUSTOM_PC_PATH"
            fi
          fi
          # Clean up potential leading/trailing/double colons
          FINAL_PKG_CONFIG_PATH=$(echo "$FINAL_PKG_CONFIG_PATH" | sed 's/^://g' | sed 's/:$//g' | sed 's/::\+/:/g')
          echo "PKG_CONFIG_PATH=${FINAL_PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "Final PKG_CONFIG_PATH for subsequent steps: $FINAL_PKG_CONFIG_PATH"

      - name: Build and Install gRPC from Source if not cached (Linux)
        if: steps.cache-grpc-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          echo "Cache not found or miss for gRPC. Building gRPC version: ${{ env.GRPC_VERSION }}"
          git clone --depth 1 --branch ${{ env.GRPC_VERSION }} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init --recursive
          mkdir -p cmake/build
          cd cmake/build
          echo "Configuring gRPC with CMake..."
          cmake ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_ABSL_PROVIDER=module \
            -DgRPC_CARES_PROVIDER=module \
            -DgRPC_PROTOBUF_PROVIDER=module \
            -DgRPC_SSL_PROVIDER=module \
            -DgRPC_ZLIB_PROVIDER=module \
            -Dprotobuf_INSTALL=OFF
          echo "Building gRPC..."
          make -j$(nproc)
          echo "Installing gRPC to /usr/local..."
          sudo make install
          echo "gRPC build and install complete."

      - name: Safeguard: Clean problematic protobuf pc from usr local (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Performing safeguard removal of protobuf.pc from /usr/local..."
          if [ -f /usr/local/lib/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib/pkgconfig/protobuf.pc
          fi
          if [ -f /usr/local/lib64/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib64/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib64/pkgconfig/protobuf.pc
          fi

      - name: Update linker cache after gRPC install/restore (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Updating linker cache..."
          sudo ldconfig

      # THIS IS THE STEP WHERE LINE 129 IS LIKELY LOCATED
      - name: Minimal pkg-config check for Protobuf (Linux)
        if: runner.os == 'Linux'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          # Exit immediately if a command exits with a non-zero status.
          set -e
          echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
          echo "Verifying pkg-config for SYSTEM protobuf..."
          echo "Attempting to get system Protobuf version..."
          FOUND_PROTOBUF_VERSION=$(pkg-config --modversion protobuf)
          if [ -z "$FOUND_PROTOBUF_VERSION" ]; then
            echo "ERROR: pkg-config --modversion protobuf failed to return a version for system protobuf."
            exit 1
          fi
          echo "System Protobuf version: $FOUND_PROTOBUF_VERSION"
          echo "Attempting to get system Protobuf CFLAGS..."
          time pkg-config --cflags protobuf
          echo "--- Contents of system protobuf.pc being used ---"
          PROTOBUF_PC_FILE_PATH=$(pkg-config --variable=pcfiledir protobuf)/protobuf.pc
          if [ -n "$PROTOBUF_PC_FILE_PATH" ] && [ -f "$PROTOBUF_PC_FILE_PATH" ]; then
            echo "Found protobuf.pc at: $PROTOBUF_PC_FILE_PATH"
            cat "$PROTOBUF_PC_FILE_PATH"
          else
            echo "WARNING: System protobuf.pc not found at derived path '$PROTOBUF_PC_FILE_PATH'."
            echo "pkg-config might be using a built-in path or another location."
          fi
          echo "--- End of system protobuf.pc content ---"

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false

      - name: Show R Session Info
        shell: bash
        run: |
          if [ -n "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            RSCRIPT_EXEC="${{ steps.setup-r-env.outputs.rscript-path }}"
          else
            RSCRIPT_EXEC="Rscript"
          fi
          "$RSCRIPT_EXEC" -e 'options(width = 100); pkgs <- installed.packages()[, "Version"]; sessioninfo::session_info(pkgs, include_base = TRUE)'

      - name: Check R package
        id: r_cmd_check_step
        uses: r-lib/actions/check-r-package@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          timeout: 350m

      - name: Show check logs on failure
        if: failure()
        shell: bash
        env: # Pass the check-dir output to the R script via an env var
           R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR: ${{ steps.r_cmd_check_step.outputs.check-dir }}
        run: |
          echo "Attempting to display R CMD check logs..."
          if [ -z "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            echo "WARNING: Rscript path from setup-r step is empty. This is expected if failure occurred before R setup."
            echo "Cannot run R script to display detailed R CMD check logs."
            echo "Check logs from the preceding failing step for the primary error."
            if [ -n "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR" ] && [ -d "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR" ]; then
                echo "--- Basic listing of '$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR' directory ---"
                ls -R "$R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR"
            elif [ -d "$(ls -td *.Rcheck 2>/dev/null | head -1)" ]; then
                LATEST_RCHECK=$(ls -td *.Rcheck | head -1)
                echo "--- Basic listing of fallback .Rcheck directory: $LATEST_RCHECK ---"
                ls -R "$LATEST_RCHECK"
            else
                 echo "No .Rcheck directory found by common methods."
            fi
            exit 0
          fi
          ${{ steps.setup-r-env.outputs.rscript-path }} - <<EOF
          # --- Start of R script ---
          pkg_check_dir_output <- Sys.getenv("R_CMD_CHECK_STEP_OUTPUT_CHECK_DIR", unset = NA_character_)
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            pkg_name <- default_name
            if (file.exists("DESCRIPTION")) {
              tryCatch({
                dcf_content <- read.dcf("DESCRIPTION", fields = "Package")
                if (nrow(dcf_content) >= 1 && "Package" %in% colnames(dcf_content) &&
                    !is.na(dcf_content[1,1]) && nzchar(dcf_content[1,1])) {
                  pkg_name <- dcf_content[1,1]
                } else { cat("WARNING: DESCRIPTION 'Package' field issue.\n") }
              }, error = function(e) { cat(sprintf("WARNING: Error reading DESCRIPTION: %s\n", e$message)) })
            } else { cat("WARNING: DESCRIPTION file not found.\n") }
            return(pkg_name)
          }
          pkg_check_dir <- NA_character_
          if (!is.na(pkg_check_dir_output) && nzchar(pkg_check_dir_output) && dir.exists(pkg_check_dir_output)) {
             pkg_check_dir <- pkg_check_dir_output
          } else {
            pkg_name_desc <- get_pkg_name_safe()
            if (pkg_name_desc != "unknown_package_name") {
              potential_check_dir <- file.path(getwd(), paste0(pkg_name_desc, ".Rcheck"))
              if (dir.exists(potential_check_dir)) { pkg_check_dir <- potential_check_dir }
            }
          }
          if (!is.na(pkg_check_dir) && dir.exists(pkg_check_dir)) {
            cat(sprintf("Found R CMD check directory: %s\n\n", pkg_check_dir))
            log_files_to_show <- c(file.path(pkg_check_dir, "00check.log"), file.path(pkg_check_dir, "00install.out"))
            all_found <- FALSE
            for(log_file in log_files_to_show) {
              if(file.exists(log_file)) {
                cat(sprintf("\n\n--- Contents of %s ---\n", log_file))
                tryCatch({ writeLines(readLines(log_file)) }, error = function(e) { cat(sprintf("ERROR reading %s: %s\n", log_file, e$message)) })
                all_found <- TRUE
              } else { cat(sprintf("\n\n--- %s not found ---\n", log_file)) }
            }
            if (!all_found) {
              cat("\nStandard R CMD check logs not found in", pkg_check_dir, "\nListing all files in .Rcheck dir:\n")
              print(list.files(pkg_check_dir, recursive = TRUE, all.files = TRUE))
            }
          } else {
            cat("R CMD check directory not found or determined. Listing current dir:\n")
            print(list.files(getwd()))
          }
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: ${{ steps.r_cmd_check_step.outputs.check-dir }}
