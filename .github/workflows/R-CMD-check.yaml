# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-24.04,   r: 'release'}
          - {os: ubuntu-24.04,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-24.04,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Non-Windows
      - name: Install system dependencies (Linux - Ubuntu 24.04)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf autoconf-archive pkg-config \
            libgrpc-dev libgrpc++-dev protobuf-compiler libprotobuf-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool


            - name: Find gRPC C-core headers and verify pkg-config (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "--- Verifying contents of /usr/include and /usr/include/grpc ---"
          echo "Listing /usr/include/grpc* (top level entries):"
          ls -ld /usr/include/grpc* || echo "/usr/include/grpc* not found or ls failed"
          echo "Recursively listing /usr/include/grpc (if it exists):"
          ls -R /usr/include/grpc || echo "/usr/include/grpc directory not found or ls failed"

          echo "--- Explicitly checking for common C-core headers in /usr/include/grpc/ ---"
          HEADERS_TO_CHECK=(grpc.h status.h credentials.h byte_buffer.h slice.h)
          HEADERS_FOUND_CORRECTLY=true
          for hdr in "${HEADERS_TO_CHECK[@]}"; do
            if [ -f "/usr/include/grpc/${hdr}" ]; then
              echo "Found: /usr/include/grpc/${hdr}"
            else
              echo "ERROR: NOT FOUND: /usr/include/grpc/${hdr}"
              HEADERS_FOUND_CORRECTLY=false
            fi
          done

          if [ "$HEADERS_FOUND_CORRECTLY" = true ]; then
            echo "All essential C-core headers seem present in /usr/include/grpc/"
            echo "Setting VERIFIED_GRPC_C_INCLUDE_DIR=/usr/include"
            echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          else
            echo "ERROR: One or more essential gRPC C-core headers missing from /usr/include/grpc/."
            echo "Attempting a broader search for 'grpc/credentials.h'..."
            FOUND_PATH=$(sudo find /usr/include -type f -path '*/grpc/credentials.h' -print -quit)
            if [ -n "$FOUND_PATH" ]; then
                echo "Broader search found credentials.h at: $FOUND_PATH"
                GRPC_C_INCLUDE_DIR=$(dirname "$FOUND_PATH" | sed 's|/grpc$||')
                echo "Deduced C-core include directory for -I (from broader search): $GRPC_C_INCLUDE_DIR"
                echo "VERIFIED_GRPC_C_INCLUDE_DIR=${GRPC_C_INCLUDE_DIR}" >> $GITHUB_ENV
            else
                echo "ERROR: grpc/credentials.h (C-core header) still not found under /usr/include with broader search."
                exit 1
            fi
          fi

          echo "--- Verifying pkg-config for grpc++ ---"
          # ... (rest of pkg-config checks as before) ...

      # System Dependencies - Windows
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      # Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # Verification step for Windows tools
      - name: Verification of tools in PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      - name: Verify pkg-config setup (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          echo "Verifying pkg-config for grpc++..."
          pkg-config --modversion grpc++ || echo "WARNING: pkg-config cannot find grpc++"
          echo "grpc++ CFLAGS: $(pkg-config --cflags grpc++)"
          echo "grpc++ LIBS: $(pkg-config --libs grpc++)"
          echo "Verifying pkg-config for grpc (C-core)..." # ADD THIS BLOCK
          pkg-config --modversion grpc || echo "WARNING: pkg-config cannot find grpc (C-core)"
          echo "grpc CFLAGS: $(pkg-config --cflags grpc)"   # ADD THIS BLOCK
          echo "grpc LIBS: $(pkg-config --libs grpc)"     # ADD THIS BLOCK
          echo "Verifying pkg-config for protobuf..."
          pkg-config --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }
          echo "protobuf CFLAGS: $(pkg-config --cflags protobuf)"
          echo "protobuf LIBS: $(pkg-config --libs protobuf)"


      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          # Use 'cache: false' to disable caching, not 'cache-enabled: false'
          cache: false # For debugging pak error, re-enable later by removing or setting to true

      # Show Session Info
      - name: Show R Session Info
        shell: Rscript {0}
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Version"]
          sessioninfo::session_info(pkgs, include_base = TRUE)

      # Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'

          #error-on: 'warning' # This is a valid input
          #check-dir: 'check'   # This is a valid input

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

      # Display Check Logs on Failure
      # ... (this step can remain as is) ...
      - name: Show check logs on failure
        if: failure()
        # Changed shell to bash to ensure Rscript is found via PATH.
        # The Rscript {0} shell might have issues locating Rscript in this specific failure context.
        shell: bash
        run: |
          echo "Attempting to display R CMD check logs..."
          echo "DEBUG: Current PATH: $PATH"
          echo "DEBUG: Which Rscript: $(which Rscript || echo 'Rscript not found in PATH by which command')"
          echo "DEBUG: Rscript version: $(Rscript --version || echo 'Rscript --version command failed')"

          # Pass the R script to Rscript via stdin using a heredoc.
          # This is often more robust for multi-line scripts than Rscript -e "..."
          Rscript - <<EOF
          # --- Start of R script ---

          # More robust function to get package name from DESCRIPTION
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            pkg_name <- default_name
            if (file.exists("DESCRIPTION")) {
              tryCatch({
                dcf_content <- read.dcf("DESCRIPTION", fields = "Package")
                if (nrow(dcf_content) >= 1 && "Package" %in% colnames(dcf_content) &&
                    !is.na(dcf_content[1,1]) && nzchar(dcf_content[1,1])) {
                  pkg_name <- dcf_content[1,1]
                } else {
                  cat("WARNING: DESCRIPTION file found but 'Package' field is missing, empty, or NA.\n")
                }
              }, error = function(e) {
                cat(sprintf("WARNING: Error reading DESCRIPTION file: %s\n", e$message))
              })
            } else {
              cat("WARNING: DESCRIPTION file not found in the current working directory.\n")
            }
            return(pkg_name)
          }

          pkg_name_desc <- get_pkg_name_safe()

          if (pkg_name_desc == "unknown_package_name") {
            cat("WARNING: Could not reliably determine package name from DESCRIPTION.\n")
            cat("The .Rcheck directory might be named differently or not exist.\n")
            # As a fallback, list contents of 'check' if it exists, to help find the .Rcheck dir manually
            if (dir.exists("check")) {
              cat("Listing contents of 'check' directory as package name is uncertain:\n")
              print(list.files("check")) # Lists non-recursively by default
            }
          }

          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))
          cat(sprintf("Attempting to find logs in expected .Rcheck directory: %s\n\n", rcheck_dir))

          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )

          found_any_log <- FALSE
          for (log_file_path in log_files_to_show) {
            cat(sprintf("Checking for: %s\n", log_file_path)) # More verbose checking
            if (file.exists(log_file_path)) {
              found_any_log <- TRUE
              cat(sprintf("\n--- Start of %s ---\n", basename(log_file_path)))
              tryCatch({
                # readLines can fail on weird encodings or very large files.
                log_content <- readLines(log_file_path, warn = FALSE)
                writeLines(log_content) # writeLines adds a final newline
              }, error = function(e) {
                cat(sprintf("ERROR: Could not read or print log file %s. Error: %s\n", log_file_path, e$message))
                # Alternative: try to dump first few lines if R fails
                cat("Attempting to print first few lines using system 'head' command (if available)...\n")
                system_command <- sprintf("head -n 100 %s", shQuote(log_file_path))
                try(system(system_command), silent = TRUE)
              }, finally = {
                cat(sprintf("\n--- End of %s ---\n", basename(log_file_path)))
              })
            } else {
              cat(sprintf("Log file NOT FOUND: %s\n", log_file_path))
            }
          }

          if (!found_any_log) {
            cat(sprintf("\nNone of the primary log files (00check.log, 00install.out) were found in %s.\n", rcheck_dir))
            cat("This could be due to an early failure (e.g., during build) before log generation, or an unexpected .Rcheck directory name.\n")

            cat("\n--- Listing contents of 'check' directory (if it exists, recursive) ---\n")
            if (dir.exists("check")) {
              check_dir_contents <- list.files("check", recursive = TRUE, all.files = TRUE, full.names = TRUE)
              if (length(check_dir_contents) > 0) {
                print(check_dir_contents)
              } else {
                cat("The 'check' directory exists but is empty or contains no listable files.\n")
              }
            } else {
              cat("The 'check' directory itself was NOT FOUND.\n")
            }

            cat(sprintf("\n--- Listing contents of current working directory ('%s', non-recursive) ---\n", getwd()))
            print(list.files(".", recursive = FALSE, all.files = TRUE, full.names = FALSE))
          }
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      # ... (this step can remain as is) ...
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
