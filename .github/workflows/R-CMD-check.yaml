# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}
          # Add back windows and macos once Linux is stable
          # - {os: windows-latest, r: 'release'}
          # - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64 # For Windows if re-enabled
      GRPC_VERSION: "v1.72.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      # System Dependencies - Linux (common)
      - name: Install common system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            protobuf-compiler libprotobuf-dev dpkg-dev \
            libre2-dev \
            build-essential autoconf libtool pkg-config cmake clang git

      # Cache and Restore gRPC build for Linux
      - name: Cache locally built gRPC (Linux)
        if: runner.os == 'Linux'
        id: cache-grpc-build
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/libgrpc.so*
            /usr/local/lib/libgrpc_unsecure.so*
            /usr/local/lib/libgrpc++.so*
            /usr/local/lib/libgrpc++_unsecure.so*
            /usr/local/lib/libgpr.so*
            /usr/local/lib/libaddress_sorting.so*
            /usr/local/lib/pkgconfig/grpc.pc
            /usr/local/lib/pkgconfig/grpc_unsecure.pc
            /usr/local/lib/pkgconfig/grpc++.pc
            /usr/local/lib/pkgconfig/grpc++_unsecure.pc
            /usr/local/include/grpc
            /usr/local/include/grpc++
            /usr/local/bin/grpc_cpp_plugin
            /usr/local/lib/libabsl_*
          key: ${{ runner.os }}-grpc-custombuild-v2-${{ env.GRPC_VERSION }}-r${{ matrix.config.r }}

      - name: Set PKG_CONFIG_PATH for Linux
        if: runner.os == 'Linux'
        run: |
          SYSTEM_PC_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
          CUSTOM_PC_PATH="/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig"

          FINAL_PKG_CONFIG_PATH="$SYSTEM_PC_PATH"
          if [[ ":$FINAL_PKG_CONFIG_PATH:" != *":$CUSTOM_PC_PATH:"* ]]; then
             FINAL_PKG_CONFIG_PATH="${FINAL_PKG_CONFIG_PATH}:${CUSTOM_PC_PATH}"
          fi

          echo "PKG_CONFIG_PATH=${FINAL_PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "VERIFIED_GRPC_C_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "Final PKG_CONFIG_PATH for subsequent steps: $FINAL_PKG_CONFIG_PATH"

      - name: Build and Install gRPC from Source if not cached (Linux)
        if: steps.cache-grpc-build.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          echo "Cache not found or miss for gRPC. Building gRPC version: ${{ env.GRPC_VERSION }}"
          git clone --depth 1 --branch ${{ env.GRPC_VERSION }} https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          git submodule update --init --recursive

          mkdir -p cmake/build
          cd cmake/build

          echo "Configuring gRPC with CMake..."
          cmake ../.. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_ABSL_PROVIDER=module \
            -DgRPC_CARES_PROVIDER=module \
            -DgRPC_PROTOBUF_PROVIDER=module \
            -DgRPC_SSL_PROVIDER=module \
            -DgRPC_ZLIB_PROVIDER=module \
            -Dprotobuf_INSTALL=OFF # Attempt to prevent vendored protobuf's .pc install

          echo "Building gRPC..."
          make -j$(nproc)

          echo "Installing gRPC to /usr/local..."
          sudo make install
          echo "gRPC build and install complete."

      - name: Safeguard: Clean problematic protobuf.pc from /usr/local (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Performing safeguard removal of protobuf.pc from /usr/local..."
          if [ -f /usr/local/lib/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib/pkgconfig/protobuf.pc
          fi
          if [ -f /usr/local/lib64/pkgconfig/protobuf.pc ]; then
            echo "Found /usr/local/lib64/pkgconfig/protobuf.pc. Removing."
            sudo rm -f /usr/local/lib64/pkgconfig/protobuf.pc
          fi

      - name: Update linker cache after gRPC install/restore (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Updating linker cache..."
          sudo ldconfig

      # This is line 136 now
      - name: Minimal pkg-config check for Protobuf (Linux)
        if: runner.os == 'Linux'
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          echo "Current PKG_CONFIG_PATH for this step: $PKG_CONFIG_PATH"
          echo "Verifying pkg-config for SYSTEM protobuf..."
          # The next line was where the error was, line 141 in the previous version
          FOUND_PROTOBUF_VERSION=$(pkg-config --modversion protobuf) || { echo "ERROR: pkg-config cannot find system protobuf after potential cleanup."; exit 1; }
          echo "System Protobuf version: $FOUND_PROTOBUF_VERSION"
          echo "System Protobuf CFLAGS:"
          time pkg-config --cflags protobuf
          echo "--- Contents of system protobuf.pc being used ---"
          PROTOBUF_PC_FILE_PATH=$(pkg-config --variable=pcfiledir protobuf)/protobuf.pc
          if [ -f "$PROTOBUF_PC_FILE_PATH" ]; then
            echo "Found protobuf.pc at: $PROTOBUF_PC_FILE_PATH"
            cat "$PROTOBUF_PC_FILE_PATH"
          else
            echo "WARNING: System protobuf.pc not found at $PROTOBUF_PC_FILE_PATH (pkg-config might be finding it elsewhere or using built-in). This might be okay if previous checks passed."
          fi
          echo "--- End of system protobuf.pc content ---"

      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false

      - name: Show R Session Info
        shell: bash
        run: |
          if [ -n "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            RSCRIPT_EXEC="${{ steps.setup-r-env.outputs.rscript-path }}"
          else
            RSCRIPT_EXEC="Rscript"
          fi
          "$RSCRIPT_EXEC" -e 'options(width = 100); pkgs <- installed.packages()[, "Version"]; sessioninfo::session_info(pkgs, include_base = TRUE)'

      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          timeout: 350m

      # ... (rest of file, e.g., Windows/macOS specific steps, failure steps)
      # Ensure Windows and macOS steps are re-enabled or correctly handled
      # if they were temporarily commented out.

      # System Dependencies - macOS (ensure this is present if you uncomment macOS matrix)
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool

      # System Dependencies - Windows (ensure this is present if you uncomment Windows matrix)
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      - name: Verification of tools in PATH (Windows) # Ensure this step is correctly placed after MSYS2 setup
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

      # Display Check Logs on Failure
      - name: Show check logs on failure
        if: failure()
        shell: bash
        run: |
          echo "Attempting to display R CMD check logs..."
          # ... (rest of your log display script) ...
          # (ensure the Rscript part for log display is complete)
          if [ -z "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            echo "WARNING: Rscript path from setup-r step is empty. This is expected if failure occurred before R setup."
            # ...
            exit 0
          fi
          ${{ steps.setup-r-env.outputs.rscript-path }} - <<EOF
          # --- Start of R script ---
          # (Your full R script for analyzing check logs from previous responses goes here)
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            pkg_name <- default_name
            if (file.exists("DESCRIPTION")) {
              tryCatch({
                dcf_content <- read.dcf("DESCRIPTION", fields = "Package")
                if (nrow(dcf_content) >= 1 && "Package" %in% colnames(dcf_content) &&
                    !is.na(dcf_content[1,1]) && nzchar(dcf_content[1,1])) {
                  pkg_name <- dcf_content[1,1]
                } else {
                  cat("WARNING: DESCRIPTION file found but 'Package' field is missing, empty, or NA.\n")
                }
              }, error = function(e) {
                cat(sprintf("WARNING: Error reading DESCRIPTION file: %s\n", e$message))
              })
            } else {
              cat("WARNING: DESCRIPTION file not found in the current working directory.\n")
            }
            return(pkg_name)
          }
          pkg_name_desc <- get_pkg_name_safe()
          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))
          cat(sprintf("Attempting to find logs in expected .Rcheck directory: %s\n\n", rcheck_dir))
          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )
          # ... (ensure your full R log display script is here) ...
          for(log_file in log_files_to_show) {
            if(file.exists(log_file)) {
              cat(sprintf("\n\n--- Contents of %s ---\n", log_file))
              cat(readLines(log_file), sep = "\n")
            } else {
              cat(sprintf("\n\n--- %s not found ---\n", log_file))
            }
          }
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
