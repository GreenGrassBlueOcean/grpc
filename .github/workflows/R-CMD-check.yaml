# .github/workflows/R-CMD-check.yaml

name: R-CMD-check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (R ${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-24.04,   r: 'release'}
          - {os: ubuntu-24.04,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-24.04,   r: 'oldrel-1'}
          - {os: windows-latest, r: 'release'}
          - {os: macos-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      MSYSTEM: UCRT64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set script permissions (Unix-like OS)
        if: runner.os != 'Windows'
        run: |
          if [ -f configure ]; then chmod +x configure; fi
          if [ -d tools ]; then find tools -type f -exec chmod +x {} \;; fi

      - name: Install system dependencies (Linux - Ubuntu 24.04) # Ensure dpkg-dev is here
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf autoconf-archive pkg-config \
            libgrpc-dev libgrpc++-dev protobuf-compiler libprotobuf-dev \
            dpkg-dev # Ensure dpkg-dev is installed

      - name: Find and Verify gRPC C-core headers (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "--- System Information ---"
          lsb_release -a
          apt-cache policy libgrpc-dev || echo "apt-cache policy failed for libgrpc-dev"

          echo "--- [DIAG] Files listed by libgrpc-dev (dpkg-query -L) ---"
          sudo dpkg-query -L libgrpc-dev > libgrpc-dev_files.txt
          echo "Full file list for libgrpc-dev in libgrpc-dev_files.txt artifact."
          echo "Searching for 'grpc.h' in libgrpc-dev files:"
          grep "/grpc.h$" libgrpc-dev_files.txt || echo "'grpc.h' not in libgrpc-dev files list."
          echo "Searching for 'credentials.h' in libgrpc-dev files:"
          grep "credentials.h" libgrpc-dev_files.txt || echo "'credentials.h' (any path) not in libgrpc-dev files list."

          echo "--- [DIAG] pkg-config output for 'grpc' (C-core) ---"
          GRPC_CFLAGS_PKGCONFIG=$(pkg-config --cflags grpc || echo "pkg-config --cflags grpc failed")
          echo "pkg-config --cflags grpc: $GRPC_CFLAGS_PKGCONFIG"
          echo "pkg-config --libs grpc: $(pkg-config --libs grpc || echo "pkg-config --libs grpc failed")"

          echo "--- [DIAG] pkg-config output for 'grpc++' ---"
          GRPCXX_CFLAGS_PKGCONFIG=$(pkg-config --cflags grpc++ || echo "pkg-config --cflags grpc++ failed")
          echo "pkg-config --cflags grpc++: $GRPCXX_CFLAGS_PKGCONFIG"
          echo "pkg-config --libs grpc++: $(pkg-config --libs grpc++ || echo "pkg-config --libs grpc++ failed")"

          echo "--- Locating gRPC C-core headers ---"
          # Attempt to find the C-core credentials.h
          # We know grpc.h is at /usr/include/grpc/grpc.h
          # We want to find a credentials.h that would be included as <grpc/credentials.h>
          # or <grpc/some_subdir/credentials.h>

          C_CORE_CREDENTIALS_H_PATH=""
          EXPECTED_C_CORE_PATH="/usr/include/grpc/credentials.h"

          echo "Searching for C-core credentials.h under /usr/include/grpc/ ..."
          # Search for any file named credentials.h directly under /usr/include/grpc or its subdirectories
          # and prioritize one that is NOT under a "grpc++" or "grpcpp" subdirectory
          FOUND_C_HEADERS=$(sudo find /usr/include/grpc -name credentials.h -type f -print 2>/dev/null | grep -v '/grpc++/\|/grpcpp/')

          if [ -n "$FOUND_C_HEADERS" ]; then
            # If multiple are found (e.g., in impl/, core/, etc.), pick one.
            # Prefer one that looks like it could be part of the public C API.
            # This is heuristic. For now, just take the first one found by the filtered find.
            C_CORE_CREDENTIALS_H_PATH=$(echo "$FOUND_C_HEADERS" | head -n 1)
            echo "Found potential C-core credentials.h at: $C_CORE_CREDENTIALS_H_PATH"

            # Now, determine the correct -I flag for this.
            # If C_CORE_CREDENTIALS_H_PATH is /usr/include/grpc/foo/bar/credentials.h
            # and your code does #include <grpc/foo/bar/credentials.h>, then -I/usr/include is fine.
            # If your code does #include <grpc/credentials.h> and the file is /usr/include/grpc/credentials.h,
            # then -I/usr/include is fine.
            # The tricky part is if the file is, say, /usr/include/grpc/internal/credentials.h and you want
            # to include it as <grpc/credentials.h> -- this would require -I/usr/include/grpc/internal, which is unlikely.

            # Let's assume the most common scenario: we need -I/usr/include for includes like
            # <grpc/something.h> or <grpc/subdir/something.h>
            PROPOSED_C_INCLUDE_DIR="/usr/include"
            echo "Using PROPOSED_C_INCLUDE_DIR for C-core: $PROPOSED_C_INCLUDE_DIR"
            echo "VERIFIED_GRPC_C_INCLUDE_DIR=${PROPOSED_C_INCLUDE_DIR}" >> $GITHUB_ENV
            echo "VERIFIED_GRPC_C_INCLUDE_DIR set to: ${PROPOSED_C_INCLUDE_DIR}"

          else
            echo "ERROR: No C-core style 'credentials.h' found under /usr/include/grpc/ (excluding grpc++/grpcpp subdirs)."
            echo "This means #include <grpc/credentials.h> will likely fail with standard include paths."
            echo "The C++ version is at /usr/include/grpc++/security/credentials.h."
            echo "Consider if your C-core code needs to adapt its include, or if a different dev package is needed."
            # List all credentials.h to see what's available system-wide for gRPC related paths
            echo "Listing all 'credentials.h' under /usr/include/grpc* for inspection:"
            sudo find /usr/include/grpc* -name credentials.h -ls || echo "No credentials.h found under /usr/include/grpc* by find"
            exit 1
          fi

      - name: Upload libgrpc-dev file list # New step to upload diagnostic artifact
        if: runner.os == 'Linux' && (always() || failure()) # Run even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: libgrpc-dev-files-ubuntu-24.04
          path: libgrpc-dev_files.txt

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install grpc protobuf pkg-config autoconf automake autoconf-archive libtool


      # System Dependencies - Windows
      - name: Setup MSYS2 and install gRPC/Protobuf/Build Tools (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYSTEM }}
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-grpc
            mingw-w64-ucrt-x86_64-protobuf
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-toolchain

      # Setup R Environment
      - name: Setup R (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        id: setup-r-env
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # Verification step for Windows tools
      - name: Verification of tools in PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "--- Verifying Tools in PATH after MSYS2 & R setup ---"
          echo "PATH: $PATH"
          which pkg-config || { echo "ERROR: pkg-config NOT FOUND"; exit 1; }
          which make || { echo "ERROR: make NOT FOUND"; exit 1; }
          which g++ || { echo "ERROR: g++ NOT FOUND"; exit 1; }
          echo "--- End Verification ---"

      - name: Verify pkg-config setup (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          echo "Verifying pkg-config for grpc++..."
          pkg-config --modversion grpc++ || echo "WARNING: pkg-config cannot find grpc++"
          echo "grpc++ CFLAGS: $(pkg-config --cflags grpc++)"
          echo "grpc++ LIBS: $(pkg-config --libs grpc++)"
          echo "Verifying pkg-config for grpc (C-core)..."
          pkg-config --modversion grpc || echo "WARNING: pkg-config cannot find grpc (C-core)"
          echo "grpc CFLAGS: $(pkg-config --cflags grpc)"
          echo "grpc LIBS: $(pkg-config --libs grpc)"
          echo "Verifying pkg-config for protobuf..."
          pkg-config --modversion protobuf || { echo "ERROR: pkg-config cannot find protobuf"; exit 1; }
          echo "protobuf CFLAGS: $(pkg-config --cflags protobuf)"
          echo "protobuf LIBS: $(pkg-config --libs protobuf)"


      # Install R Package Dependencies
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sessioninfo
            any::desc
          cache: false


      # Show Session Info
      - name: Show R Session Info
        shell: Rscript {0}
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Version"]
          sessioninfo::session_info(pkgs, include_base = TRUE)

      # Run R CMD Check
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'
          # error-on: 'warning'
          # check-dir: 'check'

      # Cleanup potentially locked temp files (Windows)
      - name: Cleanup potentially locked temp files (Windows)
        if: runner.os == 'Windows' && failure()
        shell: bash
        run: |
          echo "Attempting to clean up DumpStack.log.tmp..."
          rm -f /d/DumpStack.log.tmp || echo "DumpStack.log.tmp not found or could not be removed."

            # Display Check Logs on Failure
      - name: Show check logs on failure
        if: failure()
        shell: bash
        run: |
          echo "Attempting to display R CMD check logs..."
          echo "DEBUG: Rscript path from setup-r step: ${{ steps.setup-r-env.outputs.rscript-path }}"
          echo "DEBUG: Current PATH: $PATH"
          echo "DEBUG: Which Rscript (direct call): $(which Rscript || echo 'Rscript not found in PATH by which command')"
          echo "DEBUG: Rscript version (direct call): $(Rscript --version || echo 'Rscript --version command failed')"
          # Corrected line - removed HTML comment
          echo "DEBUG: Rscript version (using setup-r path): $(${<!-- -->{ steps.setup-r-env.outputs.rscript-path }} --version || echo 'Rscript --version with explicit path failed')"

          if [ -z "${{ steps.setup-r-env.outputs.rscript-path }}" ]; then
            echo "WARNING: Rscript path from setup-r step is empty. This is expected if failure occurred before R setup."
            echo "Cannot run R script to display detailed R CMD check logs."
            echo "Check logs from the preceding failing step for the primary error."
            if [ -d "check" ]; then
                echo "--- Basic listing of 'check' directory (if it exists) ---"
                ls -R check
            fi
            exit 0
          fi

          ${{ steps.setup-r-env.outputs.rscript-path }} - <<EOF
          # --- Start of R script ---
          # (Your robust R script from before)
          get_pkg_name_safe <- function(default_name = "unknown_package_name") {
            pkg_name <- default_name
            if (file.exists("DESCRIPTION")) {
              tryCatch({
                dcf_content <- read.dcf("DESCRIPTION", fields = "Package")
                if (nrow(dcf_content) >= 1 && "Package" %in% colnames(dcf_content) &&
                    !is.na(dcf_content[1,1]) && nzchar(dcf_content[1,1])) {
                  pkg_name <- dcf_content[1,1]
                } else {
                  cat("WARNING: DESCRIPTION file found but 'Package' field is missing, empty, or NA.\n")
                }
              }, error = function(e) {
                cat(sprintf("WARNING: Error reading DESCRIPTION file: %s\n", e$message))
              })
            } else {
              cat("WARNING: DESCRIPTION file not found in the current working directory.\n")
            }
            return(pkg_name)
          }

          pkg_name_desc <- get_pkg_name_safe()

          if (pkg_name_desc == "unknown_package_name") {
            cat("WARNING: Could not reliably determine package name from DESCRIPTION.\n")
            cat("The .Rcheck directory might be named differently or not exist.\n")
            if (dir.exists("check")) {
              cat("Listing contents of 'check' directory as package name is uncertain:\n")
              print(list.files("check"))
            }
          }

          rcheck_dir <- file.path("check", paste0(pkg_name_desc, ".Rcheck"))
          cat(sprintf("Attempting to find logs in expected .Rcheck directory: %s\n\n", rcheck_dir))

          log_files_to_show <- c(
            file.path(rcheck_dir, "00check.log"),
            file.path(rcheck_dir, "00install.out")
          )

          found_any_log <- FALSE
          for (log_file_path in log_files_to_show) {
            cat(sprintf("Checking for: %s\n", log_file_path))
            if (file.exists(log_file_path)) {
              found_any_log <- TRUE
              cat(sprintf("\n--- Start of %s ---\n", basename(log_file_path)))
              tryCatch({
                log_content <- readLines(log_file_path, warn = FALSE)
                writeLines(log_content)
              }, error = function(e) {
                cat(sprintf("ERROR: Could not read or print log file %s. Error: %s\n", log_file_path, e$message))
                cat("Attempting to print first few lines using system 'head' command (if available)...\n")
                system_command <- sprintf("head -n 100 %s", shQuote(log_file_path)) # shQuote for safety
                try(system(system_command, intern = TRUE, ignore.stderr = TRUE), silent = TRUE) # Capture output
              }, finally = {
                cat(sprintf("\n--- End of %s ---\n", basename(log_file_path)))
              })
            } else {
              cat(sprintf("Log file NOT FOUND: %s\n", log_file_path))
            }
          }

          if (!found_any_log) { # Corrected typo here: found_any_log
            cat(sprintf("\nNone of the primary log files (00check.log, 00install.out) were found in %s.\n", rcheck_dir))
            cat("This could be due to an early failure (e.g., during build) before log generation, or an unexpected .Rcheck directory name.\n")

            cat("\n--- Listing contents of 'check' directory (if it exists, recursive) ---\n")
            if (dir.exists("check")) {
              check_dir_contents <- list.files("check", recursive = TRUE, all.files = TRUE, full.names = TRUE)
              if (length(check_dir_contents) > 0) {
                print(check_dir_contents)
              } else {
                cat("The 'check' directory exists but is empty or contains no listable files.\n")
              }
            } else {
              cat("The 'check' directory itself was NOT FOUND.\n")
            }

            cat(sprintf("\n--- Listing contents of current working directory ('%s', non-recursive) ---\n", getwd()))
            print(list.files(".", recursive = FALSE, all.files = TRUE, full.names = FALSE))
          }
          # --- End of R script ---
          EOF

      # Upload Full Check Results Directory on Failure
      - name: Upload full check results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-check-results
          path: check
